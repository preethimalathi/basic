Collection
=============
- Array is a static data structure and we can't allocate the new element addition at the runtime.

- In array we can't delete an element's memory instead we can only shift the array element position. Hence memory will be wastage when there is no use.

- Hence to create a dynamic data structure we can use the Collection.

- To implement collection java provided the collection class hierarchy.

- The top most hierarchy element is Collection which is an interface from where all the other collection interfaces and classes are been derived.

- From Collection interface there are two sub interfaces which are derived that is List and Set.

- From List Interface there are classes which are implemented they are Vector and ArrayList.

- From Set interface there are classes which are implemented they are HashSet

- List and Set are the two different type of collection.

Demo : Implementing ArrayList
==============================
import java.util.*;
public class ListDemo 
{
	public static void main(String arg[])
	{
		ArrayList listItems=new ArrayList();
		
		//To store the element in the collection we need to use add() method.

		listItems.add("Sunil");//upcasting
		listItems.add("Kiran");
		listItems.add("Vinod");

		listItems.add(100);
		listItems.add(200);

		//Any thing which we are adding to the Collection will be consider as object.
		System.out.println("Size of ArrayList:"+listItems.size()); //5

		//To get a particular item from the array list from a specified index
		Object element=listItems.get(2);
		String myElement=(String)element;//downcasting
		
		System.out.println("Element in 2nd Index:"+myElement);
		
		//Display All Elements
		System.out.println(listItems);
	}
}


Upcasting : When we want to store the lower data type element to an higher data type then we can use upcasting.

int number=101;
double decimal_number;
decimal_number=number; //upcasting

Traversal of Collection
====================

- To display the elements of the Collection we can use three different ways.

1. Enhanced For

	- This is enhanced version of the for loop which generally use when we want to display the collection or array elements.

	Syntax
	========

	for(DataType element : CollectionName|ArrayName)
	{
		//code goes here
	}

instanceof
===============

- It is an operator which will return a boolean value.

- This operator will return true if the instance is of type the specified one.

Demo
=============
import java.util.*;
public class ListDemo 
{
	public static void main(String arg[])
	{
		ArrayList listItems=new ArrayList();
		
		//To store the element in the collection we need to use add() method.

		listItems.add("Sunil");//upcasting
		listItems.add("Kiran");
		listItems.add("Vinod");

		listItems.add(100);
		listItems.add(200);

		for(Object element:listItems)
		{
			if(element instanceof String)
			{
				String str=(String)element;
				System.out.println(str);
			}
			else if(element instanceof Integer)
			{
				Integer intr=(Integer)element;
				System.out.println(intr);
			}
			else {}
		}
	}
}

2. Iterator

	- Iterator is an interface in java.util package

	- This interface is used for displaying the collection

	- To get the Iterator object we need to call the iterator() method on the Collection object.

	- This interface has two methods they are

	1.hasNext()= > This return true if element exists in that position element returns false.

	2. next() => This method returns an object in that position

Demo
============
import java.util.*;
public class ListDemo 
{
	public static void main(String arg[])
	{
		ArrayList listItems=new ArrayList();
		
		//To store the element in the collection we need to use add() method.

		listItems.add("Sunil");//upcasting
		listItems.add("Kiran");
		listItems.add("Vinod");

		listItems.add(100);
		listItems.add(200);

		Iterator iterator=listItems.iterator();
		
		System.out.println(listItems);
		
		while(iterator.hasNext())
		{
			Object element=iterator.next();
			if(element instanceof String)
			{
				String str=(String) element;
				System.out.println(str);
				if(str.equals("Vinod"))
					iterator.remove();
			}
			else if(element instanceof Integer)
				System.out.println((Integer)element);
			else {}
		}
		
		System.out.println(listItems);
	}
}

- Using iterator we can also delete a particular element.

3. ListIterator






























