1..Write a program to insert a number at the given position

import java.util.Scanner;
public class I 
{
    public static void main(String[] args) 
    {
        int n, pos, x;
        Scanner s = new Scanner(System.in);
        System.out.print("Enter no. of elements you want in array:");
        n = s.nextInt();
        int a[] = new int[n+1];
        System.out.println("Enter all the elements:");
        for(int i = 0; i < n; i++)
        {
            a[i] = s.nextInt();
        }
        System.out.print("Enter the position where you want to insert element:");
        pos = s.nextInt();
        System.out.print("Enter the element you want to insert:");
        x = s.nextInt();
        for(int i = (n-1); i >= (pos-1); i--)
        {
            a[i+1] = a[i];
        }
        a[pos-1] = x;
        System.out.print("After inserting:");
        for(int i = 0; i < n; i++)
        {
            System.out.print(a[i]+",");
        }
        System.out.print(a[n]);
    }
}
===================================================================================================
2...Linear search..


import java.util.Scanner;

public class Linear 
{
public static void main(String args[])
	  {
	    int c, n, search, array[];
	 
	    Scanner scanner = new Scanner(System.in);
	    System.out.println("Enter number of elements");
	    n = scanner.nextInt(); 
	    array = new int[n];
	 
	    System.out.println("Enter " + n + " integers");
	 
	    for (c = 0; c < n; c++)
	      array[c] = scanner.nextInt();
	 
	    System.out.println("Enter value to find");
	    search = scanner.nextInt();
	 
	    for (c = 0; c < n; c++)
	    {
	      if (array[c] == search)     
	      {
	         System.out.println(search + " is present at location " + (c + 1) + ".");
	          break;
	      }
	   }
	   if (c == n)  
		  	      System.out.println(search + " is not present in array.");
	  
	  scanner.close();
}
}
============================================================================================================
3..Binary...
import java.util.Scanner;
 
class BinarySearch 
{
  public static void main(String args[])
  {
    int c, first, last, middle, n, search, array[];
 
    Scanner in = new Scanner(System.in);
    System.out.println("Enter number of elements");
    n = in.nextInt(); 
    array = new int[n];
 
    System.out.println("Enter " + n + " integers");
 
 
    for (c = 0; c < n; c++)
      array[c] = in.nextInt();
 
    System.out.println("Enter value to find");
    search = in.nextInt();
 
    first  = 0;
    last   = n - 1;
    middle = (first + last)/2;
 
    while( first <= last )
    {
      if ( array[middle] < search )
        first = middle + 1;    
      else if ( array[middle] == search ) 
      {
        System.out.println(search + " found at location " + (middle + 1) + ".");
        break;
      }
      else
         last = middle - 1;
 
      middle = (first + last)/2;
   }
   if ( first > last )
      System.out.println(search + " is not present in the list.\n");
  }
}
================================================================================================================
4....palindrome....
package task3;

import java.util.Scanner;

public class Palindro 
{
	public static void main(String args[])
	   {
	      String strin, reverse = "";
	      Scanner scanner = new Scanner(System.in);
	 
	      System.out.println("Enter a string:");
	      strin = scanner.nextLine();
	 
	      int length = strin.length();
	 
	      for ( int i = length - 1; i >= 0; i-- )
	         reverse = reverse + strin.charAt(i);
	 
	      if (strin.equals(reverse))
	         System.out.println(strin+" is a palindrome");
	      else
	         System.out.println(strin+" is not a palindrome");
	      scanner.close();
	   }
}
====================================================================================================================
5........Inhertance......
Inheritance is the process of creating new classes, called derived classes, from. existing classes or base classes. 
The derived class inherits all the capabilities of the. base class, but can add embellishments and refinements of its own. 

Example:
class Employee
{  
 float salary=40000;  
}  
class Programmer extends Employee
{  
 int bonus=10000;  
 public static void main(String args[])
{  
   Programmer p=new Programmer();  
   System.out.println("Programmer salary is:"+p.salary);  
   System.out.println("Bonus of Programmer is:"+p.bonus);  
}  
}   
======================================================================================================================
6....Prime or not.......

public class Prime {
	 
	   public static void main (String[] args)
	   {		
	       int i =0;
	       int num =0;
	       //Empty String
	       String  primeNumbers = "";

	       for (i = 1; i <= 100; i++)         
	       { 		  	  
	          int counter=0; 	  
	          for(num =i; num>=1; num--)
		  {
	             if(i%num==0)
		     {
	 		counter = counter + 1;
		     }
		  }
		  if (counter ==2)
		  {
		     //Appended the Prime number to the String
		     primeNumbers = primeNumbers + i + " ";
		  }	
	       }	
	       System.out.println("Prime numbers from 1 to 100 are :");
	       System.out.println(primeNumbers);
	   }
	}
===========================================================================================================================
7.......compare two string.......
package task3;

import java.util.Scanner;

public class CompareString 
{
	 public static void main(String args[])
	   {
      String s1, s2;
	      Scanner scanner = new Scanner(System.in);
	      System.out.println("Enter the first string");
	      s1 = scanner.nextLine();
	      System.out.println("Enter the second string");
	      s2 = scanner.nextLine();
	      if ( s1.compareTo(s2) < 0 )
	         System.out.println("First string is greater than second.");
	      else if ( s1.compareTo(s2) > 0 )
	         System.out.println("First string is smaller than second.");
	      else   
	         System.out.println("Both strings are equal.");
	      scanner.close();
	   }
}
=========================================================================================================================
8......biggest and smallest.........
public class FindLargestSmallestNumber 
{

 public static void main(String[] args) 
{

  //numbers array
  int numbers[] = new int[]{55,32,45,98,82,11,9,39,50};

  //assign first element of an array to largest and smallest
  int smallest = numbers[0];
  int largetst = numbers[0];

  for (int i = 1; i & lt; numbers.length; i++) {
   if (numbers[i] & gt; largetst)
    largetst = numbers[i];
   else if (numbers[i] & lt; smallest)
    smallest = numbers[i];
  }

  System.out.println("Largest Number is : " + largetst);
  System.out.println("Smallest Number is : " + smallest);
 }
}
==========================================================================================================================
9......Armstrong number or not.....................
import java.util.Scanner;

public class arstrng 
{
	public static void main(String args[])
    {
        int n, nu, num=0, rem;
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter any Positive Number : ");
        n = scanner.nextInt();
        scanner.close();
        nu = n;
		while(nu != 0)
        {
            rem = nu%10;
            num = num + rem*rem*rem;
            nu = nu/10;
        }
        if(num == n)
        {
            System.out.print("Armstrong Number");
        }
        else
        {
            System.out.print("Not an Armstrong Number");
        }
    }

}
=====================================================================================================================================
10.....fact..........
 import java.util.Scanner;
class FactorialDemo{
   public static void main(String args[]){
      //Scanner object for capturing the user input
      Scanner scanner = new Scanner(System.in);
      System.out.println("Enter the number:");
      //Stored the entered value in variable
      int num = scanner.nextInt();
      //Called the user defined function fact
      int factorial = fact(num);
      System.out.println("Factorial of entered number is: "+factorial);
   }
   static int fact(int n)
   {
       int output;
       if(n==1){
         return 1;
       }
       //Recursion: Function calling itself!!
       output = fact(n-1)* n;
       return output;
   }
}
======================================================================================================================
11..............